public class Entry
{
    public string Response { get; set; }
    public string Prompt { get; set; }
    public DateTime Date { get; set; }
}
string[] prompts = new string[]
{
    "Who was the most interesting person I interacted with today?",
    "What was the best part of my day?",
    "How did I see the hand of the Lord in my life today?",
    "What was the strongest emotion I felt today?",
    "If I had one thing I could do over today, what would it be?"
};
Random random = new Random();
int index = random.Next(prompts.Length);
string randomPrompt = prompts[index];

Console.WriteLine("Your prompt: " + randomPrompt);
Console.Write("Enter your response: ");
string response = Console.ReadLine();

Entry newEntry = new Entry()
{
    Response = response,
    Prompt = randomPrompt,
    Date = DateTime.Now
};
To display the journal, you will need to iterate through all the entries in the journal and print their information to the screen. Assuming you have a list called journal that stores all the entries, you can use a foreach loop to achieve this:

csharp

foreach (Entry entry in journal)
{
    Console.WriteLine("Date: " + entry.Date);
    Console.WriteLine("Prompt: " + entry.Prompt);
    Console.WriteLine("Response: " + entry.Response);
    Console.WriteLine();
}
Saving and loading the journal from a file can be done using the StreamWriter and StreamReader classes, respectively. When saving, prompt the user for a filename and write each entry's information to the file. When loading, prompt the user for the filename and read and store each entry in the journal list. Here's an example of how you can accomplish this:

csharp

// Saving the journal to a file
Console.Write("Enter the filename to save the journal: ");
string filename = Console.ReadLine();

using (StreamWriter writer = new StreamWriter(filename))
{
    foreach (Entry entry in journal)
    {
        writer.WriteLine(entry.Date);
        writer.WriteLine(entry.Prompt);
        writer.WriteLine(entry.Response);
    }
}

// Loading the journal from a file
Console.Write("Enter the filename to load the journal: ");
string filename = Console.ReadLine();

journal.Clear();

using (StreamReader reader = new StreamReader(filename))
{
    while (!reader.EndOfStream)
    {
        Entry entry = new Entry();
        entry.Date = DateTime.Parse(reader.ReadLine());
        entry.Prompt = reader.ReadLine();
        entry.Response = reader.ReadLine();

        journal.Add(entry);
    }
}
Lastly, you can provide a menu using a while loop that allows the user to choose the different options. Here's a simple example:

csharp

List<Entry> journal = new List<Entry>();

while (true)
{
    Console.WriteLine("Menu:");
    Console.WriteLine("1. Write a new entry");
    Console.WriteLine("2. Display the journal");
    Console.WriteLine("3. Save the journal to a file");
    Console.WriteLine("4. Load the journal from a file");
    Console.WriteLine("5. Exit");

    Console.Write("Enter your choice: ");
    int choice = int.Parse(Console.ReadLine());

    switch (choice)
    {
        case 1:
            // Write a new entry
            // ... (code to show the random prompt and save the response)
            break;
        case 2:
            // Display the journal
            // ... (code to iterate through the journal and print entries)
            break;
        case 3:
            // Save the journal to a file
            // ... (code to prompt for a filename and save the journal)
            break;
        case 4:
            // Load the journal from a file
            // ... (code to prompt for a filename and load the journal)
            break;
        case 5:
            // Exit the program
            Environment.Exit(0);
            break;
        default:
            Console.WriteLine("Invalid choice. Please try again.");
            break;
    }
}
That's it! You now have a basic skeleton for your journal program. Feel free to customize and enhance it according to your needs. Let me know if you have any more questions or need further assistance. Happy coding!
foreach (Entry entry in journal)
{
    Console.WriteLine("Date: " + entry.Date);
    Console.WriteLine("Prompt: " + entry.Prompt);
    Console.WriteLine("Response: " + entry.Response);
    Console.WriteLine();
}
Console.Write("Enter the filename to save the journal: ");
string filename = Console.ReadLine();

using (StreamWriter writer = new StreamWriter(filename))
{
    foreach (Entry entry in journal)
    {
        writer.WriteLine(entry.Date);
        writer.WriteLine(entry.Prompt);
        writer.WriteLine(entry.Response);
    }
}
Console.Write("Enter the filename to load the journal: ");
string filename = Console.ReadLine();

journal.Clear();

using (StreamReader reader = new StreamReader(filename))
{
    while (!reader.EndOfStream)
    {
        Entry entry = new Entry();
        entry.Date = DateTime.Parse(reader.ReadLine());
        entry.Prompt = reader.ReadLine();
        entry.Response = reader.ReadLine();

        journal.Add(entry);
    }
}
Lastly, you can provide a menu using a while loop that allows the user to choose the different options. Here's a simple example:

csharp

List<Entry> journal = new List<Entry>();

while (true)
{
    Console.WriteLine("Menu:");
    Console.WriteLine("1. Write a new entry");
    Console.WriteLine("2. Display the journal");
    Console.WriteLine("3. Save the journal to a file");
    Console.WriteLine("4. Load the journal from a file");
    Console.WriteLine("5. Exit");

    Console.Write("Enter your choice: ");
    int choice = int.Parse(Console.ReadLine());

    switch (choice)
    {
        case 1:
            // Write a new entry
            // ... (code to show the random prompt and save the response)
            break;
        case 2:
            // Display the journal
            // ... (code to iterate through the journal and print entries)
            break;
        case 3:
            // Save the journal to a file
            // ... (code to prompt for a filename and save the journal)
            break;
        case 4:
            // Load the journal from a file
            // ... (code to prompt for a filename and load the journal)
            break;
        case 5:
            // Exit the program
            Environment.Exit(0);
            break;
        default:
            Console.WriteLine("Invalid choice. Please try again.");
            break;
    }
}


